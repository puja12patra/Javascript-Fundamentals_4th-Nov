Q4. Discuss the precedence and associativity of operators in JavaScript. Why is understanding these concepts
important?
Ans.
i) Operator Precedence in JavaScript determines the order in which operators are evaluated in an expression. Operators with higher precedence are evaluated first. If two operators have the same precedence, their associativity comes into play.

Associativity defines the order in which operators of the same precedence are executed. It can be left-to-right or right-to-left.

Here are some important points to understand:

1. Precedence and Associativity Examples:
   - In the expression `a + b * c`, multiplication (`*`) has a higher precedence than addition (`+`), so `b * c` is evaluated first.
   - If you have `a = b = c`, the assignment operator (`=`) has right-to-left associativity, so `c` is assigned to `b`, and then the result is assigned to `a`.

2. Common Operators and Precedence:
   - Assignment operators (`=`, `+=`, `-=`) have low precedence.
   - Arithmetic operators (`+`, `-`, `*`, `/`, `%`) have varying precedence.
   - Comparison operators (`<`, `>`, `<=`, `>=`, `==`, `===`, `!=`, `!==`) have lower precedence than arithmetic operators.
   - Logical operators (`&&`, `||`) have lower precedence than comparison operators.

3. Grouping with Parentheses:
   - Parentheses can be used to explicitly specify the order of evaluation.
   - For example, `(a + b) * c` ensures that `a + b` is evaluated before the multiplication with `c`.

ii) Importance of Understanding Precedence and Associativity:
   - Correctness: Misunderstanding precedence and associativity can lead to incorrect results in expressions.
   - Readability: Knowing the default rules helps in writing more readable code, but sometimes using parentheses can make the code clearer.
   - Debugging: Understanding operator behavior is crucial when debugging, especially in complex expressions.

 Examples:
   javascript code:
   let result = 5 + 10 * 2; // Multiplication has higher precedence than addition
   console.log(result); // 25

   let a = 3, b = 5, c = 2;
   let expression = a + b * c;
   console.log(expression); // 13

   let x = 10, y = 5;
   x *= y + 2; // Compound assignment with higher precedence of addition than multiplication
   console.log(x); // 60
  

In conclusion, understanding operator precedence and associativity is crucial for writing correct and efficient code. It ensures that expressions are evaluated in the intended order, preventing unexpected results and aiding in code readability.